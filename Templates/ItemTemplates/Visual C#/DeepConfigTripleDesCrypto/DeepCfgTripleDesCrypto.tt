<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ output extension=".cs"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#
	var created = File.GetCreationTimeUtc(this.Host.TemplateFile);
	var rand = new Random((int)created.Ticks);
	
	var bytes = new byte[16];
	rand.NextBytes(bytes);
	
	var key = GetByteString(bytes);
	
	rand.NextBytes(bytes);
	
	var auth = GetByteString(bytes);

#>
//------------------------------------------------------------------------------
// <auto-generated>
// This DeepConfig Crypto provider is auto generated based on its initial creation date. Changes made to this code will be overridden if the t4 template is run.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#= Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint") #>
{
	using System;
	using System.Security.Cryptography;
	using DeepConfig.Cryptography;
	
	/// <summary>
	/// A TripleDES Cryptography provider
	/// </summary>
	[Serializable]
	public sealed class <#= Path.GetFileNameWithoutExtension(this.Host.TemplateFile) #> : SymmetricalWithKey
	{
		private static readonly byte[] DesKey = new byte[] { <#= key #> };
		private static readonly byte[] HashKey = new byte[] { <#= auth #> };
		
		/// <summary>
		/// The key for the Symmetrical algorithm (see <see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> for more info)
		/// </summary>
		protected override byte[] GetCryptoKey()
        {
            return DesKey;
        }
		
		/// <summary>
		/// The IV for the Symmetrical algorithm (see <see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/> for more info)
		/// </summary>
		protected override byte[] GetAuthKey()
        {
            return HashKey;
        }
		
		/// <summary>
		/// Creates the CryptoServiceProvider
		/// </summary>
		/// <returns>A <see cref="TripleDESCryptoServiceProvider"/> instance.</returns>
		protected override SymmetricAlgorithm CreateServiceProvider()
		{
			return new TripleDESCryptoServiceProvider();
		}
	}
}

<#+
	private string GetByteString(byte[] bytes)
	{
		if(bytes == null || bytes.Length == 0)
		{
			return string.Empty;
		}
		
		var byteString = new StringBuilder();
		byteString.AppendFormat("0x{0:X2}", bytes[0]);
		
		for(int i = 1; i < bytes.Length; i++)
		{
			byteString.AppendFormat(", 0x{0:X2}", bytes[i]);
		}
		
		return byteString.ToString();
	}
#>