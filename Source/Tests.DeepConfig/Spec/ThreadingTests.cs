// <auto-generated />
//TODO: Implement and remove auto gen tag
//namespace DeepConfig.Spec
//{
//    using System;
//    using System.Globalization;
//    using System.Xml;
//    using DeepConfig;
//    using Microsoft.VisualStudio.TestTools.UnitTesting;
//    using DeepConfig.Core;
//    using System.Security.Cryptography;
//    using System.IO;
//    using DeepConfig.Providers;
//    using System.Collections.Specialized;
//    using DeepConfig.Cryptography;
//    using System.Reflection;
//    using System.Threading;

//    [TestClass]
//    public class ThreadingTests
//    {


//        public ThreadingTests()
//        { }


//        [ClassInitialize]
//        public static void Init(TestContext context)
//        {
//            Assembly asm = Assembly.GetExecutingAssembly();
//            _cfgFileName = Path.Combine(Path.GetDirectoryName(new Uri(asm.CodeBase).LocalPath), "ThredingTest.config");
//        }

//        [TestMethod]
//        public void ThreadsTest()
//        {
//            Thread t1 = new Thread(new ThreadStart(ThreadOne));
//            Thread t2 = new Thread(new ThreadStart(ThreadTwo));

//            _waiter = new ManualResetEvent(false);
//            _cfg = ConfigManager.GetConfig(_cfgFileName);

//            t1.Start();
//            t2.Start();

//            t1.Join();
//            t2.Join();

//            //Now as thread 1 runs first (to completion) and then t2 runs, we expect only the values is sectionA set by t1 to be left
//            //all other values, i.e. those is the appSettings section have been overriden by t2
//            NameValueSettings settings = _cfg.GetAppSettings();
//            Assert.AreEqual("ThreadTwo", settings.GetString(TestSettings.StringValue, ""), "val1");
//            Assert.AreEqual("", settings.GetString(TestSettings.MiscValueOne, ""), "val2");
//            Assert.AreEqual("", settings.GetString(TestSettings.MiscValueTwo, ""), "val3");
//            Assert.AreEqual("ThreadTwo", settings.GetString(TestSettings.MiscValueThree, ""), "val4");
//            Assert.AreEqual("ThreadTwo", settings.GetString(TestSettings.MiscValueFour, ""), "val5");

//            NameValueSettings settingsA = (NameValueSettings)_cfg.GetSettings(TestSections.SectionA);
//            Assert.AreEqual("ThreadOne", settingsA.GetString(TestSettings.MiscValueOne, ""), "valA1");
//            Assert.AreEqual("ThreadOne", settingsA.GetString(TestSettings.MiscValueTwo, ""), "valA2");

//            //Persistence
//            _cfg.Reload();
//            settings = _cfg.GetAppSettings();
//            Assert.AreEqual("ThreadTwo", settings.GetString(TestSettings.StringValue, ""), "val6");
//            Assert.AreEqual("", settings.GetString(TestSettings.MiscValueOne, ""), "val7");
//            Assert.AreEqual("", settings.GetString(TestSettings.MiscValueTwo, ""), "val8");
//            Assert.AreEqual("ThreadTwo", settings.GetString(TestSettings.MiscValueThree, ""), "val9");
//            Assert.AreEqual("ThreadTwo", settings.GetString(TestSettings.MiscValueFour, ""), "val10");

//            settingsA = (NameValueSettings)_cfg.GetSettings(TestSections.SectionA);
//            Assert.AreEqual("ThreadOne", settingsA.GetString(TestSettings.MiscValueOne, ""), "valA3");
//            Assert.AreEqual("ThreadOne", settingsA.GetString(TestSettings.MiscValueTwo, ""), "valA4");

//            File.Delete(_cfgFileName);
//        }

//        private void ThreadOne()
//        {
//            //Set some settings 1 of which is shared with thread 2
//            NameValueSettings settings = new NameValueSettings(null);

//            settings.SetSetting(TestSettings.MiscValueTwo, "ThreadOne"); //unique
//            settings.SetSetting(TestSettings.MiscValueThree, "ThreadOne");
//            settings.SetSetting(TestSettings.StringValue, "ThreadOne");
//            settings.SetSetting(TestSettings.MiscValueOne, "ThreadOne"); //unique

//            NameValueSettings settingsA = new NameValueSettings(null);
//            settingsA.SetSetting(TestSettings.MiscValueOne, "ThreadOne"); //unique
//            settingsA.SetSetting(TestSettings.MiscValueTwo, "ThreadOne"); //unique

//            _cfg.BeginUpdate();

//            //Let t2 try to work
//            _waiter.Set();
//            Thread.Sleep(100);

//            _cfg.SetAppSettings(settings);
//            _cfg.SetSettings(TestSections.SectionA, settingsA);

//            _cfg.EndUpdate();
//        }

//        private void ThreadTwo()
//        {
//            NameValueSettings settings = new NameValueSettings(null);

//            //t1 must be the first to work, so we wait until its in the middle of the update
//            _waiter.WaitOne();

//            settings.SetSetting(TestSettings.StringValue, "ThreadTwo");
//            settings.SetSetting(TestSettings.MiscValueThree, "ThreadTwo");
//            settings.SetSetting(TestSettings.MiscValueFour, "ThreadTwo"); //unique

//            _cfg.BeginUpdate();
//            _cfg.SetAppSettings(settings);
//            _cfg.EndUpdate();
//        }

//        [TestMethod]
//        public void Timings()
//        {
//            ConfigManager cfg = ConfigManager.GetConfig(_cfgFileName);

//            //Get some data in there
//            NameValueSettings settings = new NameValueSettings(null);

//            settings.SetSetting(TestSettings.MiscValueTwo, "Value1");
//            settings.SetSetting(TestSettings.MiscValueThree, "Value2");
//            settings.SetSetting(TestSettings.StringValue, "Value3");
//            settings.SetSetting(TestSettings.MiscValueOne, "Value4");

//            cfg.SetSettings(TestSections.SectionA, settings);

//            DateTime start = DateTime.Now;

//            for (int i = 0; i < 1000; i++)
//            {
//                NameValueSettings settingsA = (NameValueSettings)cfg.GetSettings(TestSections.SectionA);
//            }

//            TimeSpan end = DateTime.Now - start;
//            Console.Out.WriteLine("Section Retrieval: {0}", end.TotalMilliseconds);

//            File.Delete(_cfgFileName);
//        }



//        private static string _cfgFileName;
//        private ConfigManager _cfg;
//        private ManualResetEvent _waiter;


//    }

//}
